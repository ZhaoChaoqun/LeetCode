package leetcode;

import java.util.*;

/**
 * Created by IntelliJ IDEA.
 *
 * @Author 赵超群
 * @Date: 2021/6/21 3:42 下午
 */
public class _417_4 {

    public static void main(String[] args) {
        _417_4 test = new _417_4();
//        for (List<Integer> row : test.pacificAtlantic(new int[][]{
//                {1, 2, 2, 3, 5},
//                {3, 2, 3, 4, 4},
//                {2, 4, 5, 3, 1},
//                {6, 7, 1, 4, 5},
//                {5, 1, 1, 2, 4}})) {
//            System.out.print(row + " ");
//        }
//        System.out.println();
//        for (List<Integer> row : test.pacificAtlantic(new int[][]{
//                {1, 2, 3},
//                {8,9,4},
//                {7,6,5}})) {
//            System.out.print(row + " ");
//        }
//        System.out.println();
//        for (List<Integer> row : test.pacificAtlantic(new int[][]{
//                {1,2,3,4},
//                {12,13,14,5},
//                {11,16,15,6},
//                {10,9,8,7}})) {
//            System.out.print(row + " ");
//        }
//        System.out.println();
        for (List<Integer> row : test.pacificAtlantic(new int[][]{{14,19,9,19,9,7,12,15,1,6,18,12,0,12,10,3,17,16,1,5,2,12,1,0,17,6,15,11,19,2,6,14,13,16,15,4,7,6,16},{0,10,11,5,4,8,19,17,4,7,11,13,16,12,2,3,17,16,14,8,5,18,2,18,11,15,4,12,5,2,1,10,14,11,13,8,0,3,8},{11,14,14,5,8,8,10,7,10,16,8,10,7,9,10,1,14,15,16,16,4,13,19,13,6,19,12,12,11,4,9,15,11,9,3,13,19,13,8},{19,0,12,19,9,16,19,7,7,0,1,5,8,0,0,14,5,19,4,5,15,19,17,14,7,2,16,4,3,1,19,17,13,2,6,12,7,15,3},{12,6,2,11,4,0,15,11,11,14,7,5,2,12,7,18,5,0,5,9,11,10,3,3,2,5,12,3,11,0,5,6,2,0,13,11,19,9,2},{4,1,15,8,13,8,2,4,7,19,4,6,6,11,4,19,16,11,17,14,12,4,8,18,19,1,13,5,14,17,5,4,17,17,17,8,17,2,17},{1,17,11,0,18,0,12,8,0,6,11,14,8,0,12,11,4,10,12,6,18,0,14,1,10,6,11,8,9,5,0,9,6,14,2,18,9,6,6},{18,3,5,11,18,6,18,13,1,6,11,12,10,16,0,18,10,3,9,14,7,12,5,14,6,16,4,0,2,7,2,9,2,19,14,14,9,12,5},{17,6,17,15,13,6,15,3,5,18,19,8,11,18,2,1,8,12,3,3,8,19,15,18,9,4,1,4,18,6,13,18,3,6,19,13,10,18,2},{5,12,7,11,19,5,10,17,0,7,7,9,1,11,18,11,7,3,4,19,12,17,2,3,1,19,5,8,13,8,1,11,6,9,3,14,16,14,3},{14,11,9,7,4,4,5,2,9,1,2,2,4,12,7,0,8,17,9,15,14,4,18,19,17,2,18,8,8,5,7,0,4,10,12,5,8,8,2},{12,7,7,18,2,6,2,13,9,5,15,1,0,4,5,5,5,11,16,18,8,18,17,11,1,9,13,7,19,12,7,17,15,15,2,19,16,13,9},{19,4,19,4,3,0,3,4,1,3,2,10,5,9,4,8,16,7,0,12,2,6,8,11,10,12,19,10,9,12,1,18,13,18,8,17,12,8,13},{17,14,8,11,2,4,1,8,11,15,2,1,2,5,6,5,15,15,3,1,3,8,10,19,0,18,15,17,5,7,2,14,13,7,5,12,16,9,6},{13,5,15,17,15,0,0,15,18,19,2,19,14,5,13,10,19,7,19,14,14,15,4,7,1,19,1,17,14,18,18,3,0,18,6,9,15,10,16},{10,0,0,15,8,10,15,14,16,3,11,11,7,3,18,19,3,10,11,3,1,5,10,5,11,15,2,5,5,6,7,15,17,18,17,0,15,13,3},{9,8,6,17,3,7,3,3,8,3,13,10,11,16,17,5,12,16,17,6,3,18,14,13,19,13,0,18,11,19,7,3,9,3,9,19,19,6,0},{10,15,17,7,18,2,3,5,19,6,9,11,9,18,3,8,10,15,11,7,11,8,18,19,19,18,11,6,8,6,3,9,6,5,19,8,14,15,9},{19,8,7,14,4,19,3,17,8,11,19,17,18,9,1,13,3,17,4,1,17,1,17,10,13,1,13,3,3,3,12,15,18,11,12,2,5,1,17},{11,2,16,4,17,17,7,8,6,6,15,4,6,16,4,8,16,5,1,3,3,12,7,18,4,5,10,15,3,9,18,5,18,14,16,16,1,13,13},{9,17,7,2,5,0,14,12,7,9,10,11,3,5,12,17,8,5,14,19,18,16,8,2,7,17,4,13,13,7,6,8,5,5,11,2,6,4,16},{9,1,16,10,3,5,3,18,9,3,9,3,2,4,17,15,5,6,9,19,9,9,5,19,7,8,7,15,11,9,3,0,16,18,6,18,0,5,19},{6,3,15,5,5,17,17,2,10,4,11,2,13,17,18,9,8,2,10,10,1,1,17,19,14,11,8,18,14,15,4,19,13,16,19,5,0,14,17},{3,7,18,14,15,12,12,7,13,1,2,18,15,18,11,18,14,8,5,5,5,10,16,4,9,3,11,13,0,4,10,0,16,4,19,18,4,6,12},{5,11,19,17,13,13,2,18,17,10,17,3,17,6,14,19,3,7,2,8,14,7,9,1,11,5,13,12,16,7,1,3,18,2,2,1,7,5,9},{10,16,1,14,19,2,2,2,8,8,16,12,0,5,13,3,11,8,2,12,8,8,9,14,10,11,13,13,14,3,18,2,10,5,17,9,16,18,4},{9,18,15,15,9,18,12,14,10,8,17,3,0,7,17,16,1,5,1,6,0,18,14,5,3,4,7,16,6,18,1,1,17,14,12,14,4,6,7},{7,13,15,5,8,6,17,8,0,6,16,7,4,4,19,11,2,15,10,6,5,12,1,5,9,16,16,12,12,17,9,4,0,14,17,12,9,12,15},{9,8,13,18,9,3,16,12,7,7,9,5,6,15,19,14,12,3,12,0,1,1,17,9,17,4,3,18,2,15,6,12,15,9,6,8,11,10,8},{13,10,3,3,16,19,16,8,4,6,19,15,14,17,13,15,12,18,16,10,5,0,0,15,0,11,14,1,18,5,15,17,7,12,8,7,1,2,11},{6,4,9,18,2,9,7,3,16,10,17,15,9,16,4,17,11,4,9,16,1,12,16,17,18,13,16,15,14,18,2,7,5,8,11,0,17,10,15},{17,11,13,4,10,13,13,4,6,15,6,16,2,16,1,11,16,8,3,11,7,16,12,6,14,6,10,4,4,12,1,1,6,8,19,15,16,14,13},{7,16,10,4,1,1,0,10,13,16,18,6,16,12,9,11,12,7,9,9,1,2,11,6,2,18,4,19,12,6,16,19,9,9,12,10,12,4,19},{3,0,13,8,17,0,11,17,19,7,18,8,2,2,12,18,0,8,1,10,10,1,16,11,5,14,18,2,2,8,8,3,12,19,7,7,12,15,8},{8,7,12,11,5,12,15,11,12,0,1,19,11,3,18,5,7,9,6,8,4,10,6,13,5,9,19,6,7,3,16,6,6,12,1,18,16,15,15},{6,15,10,12,8,2,10,12,5,8,16,10,17,4,18,17,14,1,1,14,14,2,7,17,10,7,18,0,19,12,7,15,18,14,10,9,16,3,15},{15,9,9,10,5,3,1,12,2,7,7,5,6,15,18,11,3,15,14,9,15,6,13,9,18,18,12,4,8,8,3,14,15,9,0,11,6,4,0},{6,9,5,11,17,17,17,19,11,9,2,5,0,4,3,12,8,6,11,6,3,13,14,1,0,15,4,7,18,11,14,15,11,6,0,13,5,5,17}}
        )) {
            System.out.print(row + " ");
        }
        System.out.println();
    }

    int row;
    int col;
    int[][] dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    Set<String> pacificVisited = new HashSet<>();
    Set<String> atlanticVisited = new HashSet<>();
    int[][] matrix;
    int[][] heights;

    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        row = heights.length;
        col = row == 0 ? 0 : heights[0].length;
        matrix = new int[row][col];
        this.heights = heights;

        for (int i = 0; i < row; i++) {
            //pacific -> 10
            //atlantic -> 100
            dfs(i, 0, 10);
            dfs(i, col - 1, 100);
        }

        for (int j = 0; j < col; j++) {
            dfs(0, j, 10);
            dfs(row - 1, j, 100);
        }

        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (matrix[i][j] == 110)
                    res.add(Arrays.asList(i, j));
            }
        }

        return res;
    }

    private void dfs(int i, int j, int offset) {
        if (!isInRange(i, j))
            return;

        String symbol = i + "@" + j;
        if (contains(symbol, offset))
            return;

        matrix[i][j] += offset;
        add(symbol, offset);

        for (int k = 0; k < 4; k++) {
            int newX = i + dir[k][0];
            int newY = j + dir[k][1];

            if (isInRange(newX, newY) && heights[newX][newY] >= heights[i][j]) {
                String sym = newX + "@" + newY;
                if (contains(sym, offset))
                    continue;

                dfs(newX, newY, offset);
            }
        }
    }

    private void add(String symbol, int offset) {
        if (offset == 10)
            pacificVisited.add(symbol);
        else
            atlanticVisited.add(symbol);
    }

    private boolean contains(String symbol, int offset) {
        if (offset == 10) {
            return pacificVisited.contains(symbol);
        } else {
            return atlanticVisited.contains(symbol);
        }
    }

    private boolean isInRange(int i, int j) {
        return i >= 0 && j >= 0 && i < row && j < col;
    }
}